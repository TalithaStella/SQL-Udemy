SHOW DATABASES; (PRA VER OS BANCOS DISPONÍVEIS)

/* ANOTAÇÕES: 
- NOT NULL - NÃO PODE FICAR VAZIO!!
- ENUM: DOMINIO - CAIXA DE OPÇÕES COM INFORMAÇÕES FIXAS (SEXO, F/M) - (ENUM -->> só existe no mySQL)
- BANCO DE DADOS RELACIONAL - Tem que seguir regras (rígido)
- UNIQUE - COLUNA DE EMAIL E CPF não podem ser REPETIDO ENTRE USUÁRIOS


FOREIGN KEY
Chave estrangeira: Chave primaria de uma tabela (primary key) que vai até a outra tabela para fazer referência entre registros (linka um com o outro)
DEPENDE DIRETAMENTE DA CARDINALIDADE!! (regra de negocio que define)

EM RELACIONAMENTOS 1X1 A FK FICA NA TABELA MAIS FRACA (depende do negocio: Loja = cliente | Estacionamento = Carro)
EM RELACIONAMENTO 1XN A FK FICA NA CARDINALIDADE N 

A FK TEM QUE SER DO MESMO TIPO QUE VC DEFINIU (IDCLIENTE INT = ID_CLIENTE (FK) INT)

PARA DEFINIR O RELACIONAMENTO:
Se eu coloco UNIQUE em um local o banco entende que não pode ser repetido, então ao descrever : "ID_CLIENTE INT UNIQUE" vc também está dizendo que o relacionamento é 1x1

para dizer 1xN é só não colocar o UNIQUE (ver telefones) */


-> SELEÇÃO, PROJEÇÃO, E JUNÇÃO:

/*
(query buscar dados no banco e trazer informação)


PROJEÇÃO: Tudo que vc quer ver na tela = 
select * from cliente

select now (); (traz data e hora)



SELEÇÃO: 
Fazer meu um subconjunto de um conjunto total de registro de uma tabela
Clausula de seleção: WHERE

SELECT NOME, SEXO EMAIL FROM CLIENTE
WHERE SEXO = 'F'; <--- ONDE MORA A SELEÇÃO

(Da pra juntar usando o Where, funciona, mas não é o mais indicado)


Resumindo: 
SELECT NOME, SEXO EMAIL  ----> PROJEÇÃO
FROM CLIENTE  ----> ORIGEM
WHERE SEXO = 'F';  ----> SELEÇÃO*/


JOIN:

/* Ação de unir informações de 2 tabelas diferentes que são ligadas pelo mesmo ID. 
No caso abaixo, o JOAO (ID1) mora no centro do RJ, mas não da pra ver na mesma tabela (tabelas !=) a função JOIN
junta as informações pelo ID delas.

SELECT NOME, EMAIL, IDCLIENTE
FROM CLIENTE;  <<-- tabela DIFERENTE

SELECT ID_CLIENTE, BAIRRO, CIDADE
FROM ENDERECO;  <<-- tabela DIFERENTE

+--------+----------------+-----------+ +------------+----------+----------------+
| NOME   | EMAIL          | IDCLIENTE | | ID_CLIENTE | BAIRRO   | CIDADE         |
+--------+----------------+-----------+ +------------+----------+----------------+
| JOAO   | JOAOA@IG.COM   |         1 | |          1 | CENTRO   | RIO DE JANEIRO |
| CARLOS | CARLOSA@IG.COM |         2 | |          2 | ESTACIO  | RIO DE JANEIRO |
| ANA    | ANA@IG.COM     |         3 | |          3 | JARDINS  | SAO PAULO      |
| CLARA  | NULL           |         4 | |          4 | CENTRO   | B. HORIZONTE   |
| CELIA  | JCELIA@IG.COM  |         6 | |          5 | CENTRO   | VITORIA        |
| JORGE  | JORGE@IG.COM   |         5 | |          6 | FLAMENGO | RIO DE JANEIRO |
+--------+----------------+-----------+ +------------+----------+----------------+


PODE USAR O WHERE PARA JUNTAR ESSAS INFORMAÇÕES. FUNCIONA, MAS NÃO É O INDICADO (WHERE = SELEÇÃO):
Quando se usa WHERE o que fazemos é usar a tabela verdade para mostrar o que a gente quer, mas isso o é fazer o
banco procurar por informação que sempre é verdade. 

SELECT NOME, BAIRRO
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE;

INNER JOIN:

Inner Join pega as informações de dentro que são iguais. 
Se tiver uma FK que não tiver informação correspondente em outra tabela, ela não aparece na chamada. 

SELECT NOME, BAIRRO
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE;

WHERE SEXO = 'F'; <-- Se tiver que procurar add 


SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE
	INNER JOIN TELEFONE
	ON IDCLIENTE = ID_CLIENTE;

Os clientes que tiverem mais de 1 telefone apareceram todas as vezes que tiverem telefones para ser mostrado.


JUNTAR MAIS DE 2 TABELAS: 
O uso clausula JOIN é irrestrito, da pra juntar quantas tabelas precisar

SELECT NOME, SEXO, BAIRRO, CIDADE, TIPO, NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
INNER JOIN TELEFONE
ON IDCLIENTE = ID_CLIENTE;


ERRO DE AMBIGUIDADE: Chave com o mesmo nome nas 2 tabelas.
Poderia ter sido criado a chave como Id_cliente_telefone, mas nem sempre isso é possível então usar: 


SELECT cliente.NOME, cliente.SEXO, endereco.BAIRRO, endereco.CIDADE, telefone.TIPO, telefone.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON cliente.IDCLIENTE = endereco.ID_CLIENTE
INNER JOIN TELEFONE
ON cliente.IDCLIENTE = telefone.ID_CLIENTE;


Outra maneira de ponterar as coisas: (Melhora a performace) USANDO ALIAS:

SELECT c.NOME, c.SEXO, e.BAIRRO, e.CIDADE, t.TIPO, t.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON c.IDCLIENTE = e.ID_CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = t.ID_CLIENTE;

*/

COMANDOS DML

/*

LINGUAGEM DE MAQUINA = BINÁRIA (01)

PROG NIVEL MAIS ALTO - ORIENTADO À OBJETO = JAVA, PHP, C#

LINGUAGEM DE 4º GERAÇÃO - PARECIDA COM A LINGUAGEM HUMANA = SQL 

CATEGORIAS:
	DML - DATA MANIPULATION LANGUAGE (manipulação)
	DDL - DATA DEFINITION LANGUAGE (definição/tipagem)
	DCL - DATA CONTROL LANGUAGE (controle de acesso)
	TCL - TRANSACTION CONTROL LANGUAGE (controle de transação - atomicidade)

---------------------------

DML - DATA MANIPULATION LANGUAGE (manipulação):
	INSERT/ SELECT/ WHERE/ DELETE

----------------------------

DDL - DATA DEFINITION LANGUAGE (definição/tipagem)
	Quando vc vai criar a tabela e define os tipos de campos é uma DDL

Varchar, char, enum, INT,  */



*/

DROP TABLE = APAGA A TABELA!!!


CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M', 'F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDERECO (
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL, 
	BAIRRO VARCHAR(30) NOT NULL, 
	CIDADE VARCHAR(30) NOT NULL, 
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE (
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ('RES', 'COM', 'CEL') NOT NULL, 
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);


INSERT INTO CLIENTE (IDCLIENTE, NOME, SEXO, EMAIL, CPF) VALUES 
	(NULL, 'JOAO', 'M', 'JOAO@GMAIL.COM', '78945612364');

INSERT INTO CLIENTE (IDCLIENTE, NOME, SEXO, EMAIL, CPF) VALUES 
	(NULL, 'CARLOS', 'M', 'CARLOS@GMAIL.COM', '14774489756745'),
	(NULL, 'ANA', 'F', 'ANA@GMAIL.COM', '78945632145'),
	(NULL, 'CLARA', 'F', NULL, '45698712333'),
	(NULL, 'JORGE', 'M', 'JORGE@GMAIL.COM', '54879213645'),
	(NULL, 'CELIA', 'F', 'CELIA@GMAIL.COM', '21535468795');


SELECT * FROM CLIENTE

+-----------+--------+------+------------------+----------------+
| IDCLIENTE | NOME   | SEXO | EMAIL            | CPF            |
+-----------+--------+------+------------------+----------------+
|         1 | JOAO   | M    | JOAO@GMAIL.COM   | 78945612364    |
|         7 | CARLOS | M    | CARLOS@GMAIL.COM | 14774489756745 |
|         8 | ANA    | F    | ANA@GMAIL.COM    | 78945632145    |
|         9 | CLARA  | F    | NULL             | 45698712333    |
|        10 | JORGE  | M    | JORGE@GMAIL.COM  | 54879213645    |
|        11 | CELIA  | F    | CELIA@GMAIL.COM  | 21535468795    |
+-----------+--------+------+------------------+----------------+


DESC ENDERECO;

INSERT INTO ENDERECO (IDENDERECO, RUA, BAIRRO, CIDADE, ESTADO, ID_CLIENTE) VALUES
	(NULL,'RUA ANTONIO SA','CENTRO','B. HORIZONTE','MG',1),
	(NULL,'RUA CAPITAO HERMES','CENTRO','RIO DE JANEIRO','RJ',7),
	(NULL,'RUA PRES VARGAS','JARDINS','SAO PAULO','SP',8),
	(NULL,'RUA ALFANDEGA','ESTACIO','RIO DE JANEIRO','RJ',9),
	(NULL,'RUA DO OUVIDOR','FLAMENGO','RIO DE JANEIRO','RJ',10),
	(NULL,'RUA URUGUAIANA','CENTRO','VITORIA','ES',11);

+------------+--------------------+----------+----------------+--------+------------+
| IDENDERECO | RUA                | BAIRRO   | CIDADE         | ESTADO | ID_CLIENTE |
+------------+--------------------+----------+----------------+--------+------------+
|          1 | RUA ANTONIO SA     | CENTRO   | B. HORIZONTE   | MG     |          1 |
|          2 | RUA CAPITAO HERMES | CENTRO   | RIO DE JANEIRO | RJ     |          7 |
|          3 | RUA PRES VARGAS    | JARDINS  | SAO PAULO      | SP     |          8 |
|          4 | RUA ALFANDEGA      | ESTACIO  | RIO DE JANEIRO | RJ     |          9 |
|          5 | RUA DO OUVIDOR     | FLAMENGO | RIO DE JANEIRO | RJ     |         10 |
|          6 | RUA URUGUAIANA     | CENTRO   | VITORIA        | ES     |         11 |
+------------+--------------------+----------+----------------+--------+------------+


DESC TELEFONE;

INSERT INTO TELEFONE VALUES(NULL,'CEL','45655455',1);

INSERT INTO TELEFONE VALUES(NULL,'RES','56576876',7);
INSERT INTO TELEFONE VALUES(NULL,'CEL','87866896',1);
INSERT INTO TELEFONE VALUES(NULL,'COM','54768899',8);
INSERT INTO TELEFONE VALUES(NULL,'RES','99667587',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','78989765',8);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99766676',8);
INSERT INTO TELEFONE VALUES(NULL,'COM','66687899',10);
INSERT INTO TELEFONE VALUES(NULL,'RES','89986668',9);
INSERT INTO TELEFONE VALUES(NULL,'CEL','88687909',7);


+------------+------+----------+------------+
| IDTELEFONE | TIPO | NUMERO   | ID_CLIENTE |
+------------+------+----------+------------+
|          1 | CEL  | 45655455 |          1 |-
|          2 | RES  | 56576876 |          7 |+
|          3 | CEL  | 87866896 |          1 |-
|          4 | COM  | 54768899 |          8 |*
|          5 | RES  | 99667587 |          1 |-
|          6 | CEL  | 78989765 |          8 |*
|          7 | CEL  | 99766676 |          8 |*
|          8 | COM  | 66687899 |         10 |
|          9 | RES  | 89986668 |          9 |
|         10 | CEL  | 88687909 |          7 |+
+------------+------+----------+------------+

-- VALORES SE REPETEM PQ NÃO TEM A CLAUSULA UNIQUE, OU SEJA É CARDINALIDADE = N



